# -*- coding: utf-8 -*-
"""
Created on Fri Apr 15 11:52:37 2022

@author: Lujain Altaiyan
"""

import matplotlib.pyplot as plt
import numpy as np
from scipy.integrate import solve_ivp  


''' Assigning the starting conditions and the time range'''
r_max = 0.8
r_list = np.linspace(0.01,r_max,30)
v_ave_list = []
                           # Riverflow = [3464640,3240000,3041280,2808000,2540160,2324160,2168640,2030400,1909440,1779840,1753920,2160000,2160000,2557440,2384640,3481920,2877120,2488320,3473280,7145280,10195200,8009280,4950720,4026240,3611520,3542400,4069440,7931520,11491200,10540800,8579520,6143040,6652800,6324480,5581440,6099840,5140800,4199040,3585600,3170880,2833920,2522880,2332800,2151360,2298240,3127680,4121280,5633280,6194880,4760640,4587840,4008960,3818880,3395520,2946240,2617920,2367360,2194560,2056320,1952640,1848960,2125440,2445120,1909440,1719360,1607040,1512000,1451520,1892160,1900800,2592000,3879360,2626560,2090880,1840320,1658880,1563840,1477440,1399680,1356480,1287360,1218240,1175040,1252800,1831680,1926720,1520640,1347840,1226880,1157760,1080000,1010880,976320,950400,933120,898560,881280,861408,856224,831168,811296,793152,759456,747360,719712,717120,695520,686880,700704,663552,641088,622944,609984,609984,597024,585792,677376,1054080,872640,720576,658368,627264,692928,796608,700704,643680,662688,1097280,950400,791424,695520,698112,1157760,1114560,1036800,1278720,1270080,1088640,1244160,1149120,1641600,2367360,2280960,3473280,2946240,2125440,1710720,1486080,1330560,1192320,1114560,1028160,984960,915840,839808,807840,791424,761184,722304,698112,682560,679104,647136,618624,600480,559872,582336,580608,653184,698112,714528,654912,654048,584928,531360,508896,486432,705888,1183680,783648,624672,533088,506304,505440,521856,572832,609120,663552,618624,513216,503712,595296,844128,702432,558144,465696,444960,438912,430272,419040,406080,388800,386208,378432,645408,812160,501984,482976,623808,540864,562464,508032,575424,631584,584928,480384,437184,495936,650592,719712,1270080,1175040,734400,602208,540000,498528,475200,451872,419040,421632,452736,463104,559872,648864,565920,461376,402624,367200,380160,367200,370656,356832,353376,336096,324000,314496,314496,314496,316224,316224,292896,331776,342144,317952,311040,307584,399168,390528,335232,324864,293760,304992,300672,286848,287712,301536,299808,290304,316224,410400,803520,950400,665280,547776,1105920,1330560,1157760,2116800,1399680,959040,825120,724896,672192,611712,578016,570240,534816,518400,501984,491616,504576,705888,3395520,5201280,2522880,1598400,1330560,1175040,1028160,967680,924480,1425600,2263680,4968000,5624640,3844800,2548800,2064960,1728000,1555200,1434240,1287360,1226880,1149120,1080000,1097280,1054080,976320,907200,881280,852768,808704,795744,787968,754272,715392,688608,682560,674784,693792,707616,668736,626400,596160,656640,624672,793152,838944,741312,702432,1460160,2125440,1650240,1693440,1356480,1270080,1261440,1278720,1200960,1088640,1028160,967680,933120,907200,864000,828576,827712,872640,1779840,3136320,2479680,3222720,4086720,3456000,3430080,3153600]      
                            
for r in r_list:
                                
   g_sq = 270612.74 # (7.3*10^10 )^0.5 #m/day^2 
   time_limit = 366 # days
   times = (0, time_limit)                               # Time range 365 days
   ttt = np.linspace(0, time_limit, time_limit )                # Time evaluation points
                             
   '''----------------------------------------------------------------------------------------'''
   A = 4* 10**6 #  m^2 
   v0 = [4* 10**6 * 15] # m^3 ; a = 4 x 10^6 m^2 & h = 15 m start water hight
                                
   '''----------------------------------------------------------------------------------------'''
                             
                            
   def Reservoir_volume_average(t,v):
    
    #dV/dt = dP/dt + dI/dt + dR/dt + dE/dt
    #dP/dt = πr^2 √(2gV/A), g = 9.81
    #dI/dt = 51840 m^3/day,
    #dR/dt = 0.0022451A = 8980.396 m^3/day 
    #dE/dt = -0.0019165A = -7665.98 m^3/day,
    #A = 4 x 10^6 m^2
         h = v/A
         if h > 50:
             input(" Model one - level higher than 50!!")
             h = 50
    
            dv =   56220 - np.pi* r **2 *g_sq * np.sqrt((2*v)/A)
    return dv
    
                            
                            
                            
                            
                            
                            
                            
   sole = solve_ivp(Reservoir_volume_average,times,v0,t_eval=ttt)
   Water_volume = sole.y[0]
    # v_ave_list.append(sum(Water_volume) / len(Water_volume))
   v_ave_list.append(Water_volume[-1])
                            
plt.plot(r_list,v_ave_list, 'r')    
plt.title("Water volume in the reservoir")
plt.xlabel("r")
plt.ylabel("Average volume of reservoir m^3")
plt.show()

r_ave = sum(r_list)/len(r_list)                                
v_g = min(v_ave_list, key=lambda x:abs(x-v0))
r_g = r_list[v_ave_list.index(v_g)]
print(r_g)                            
print(r_ave)              